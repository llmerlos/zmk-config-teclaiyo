#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define _BASE   0
#define _GAME   1
#define _GNUM   2
#define _LOWER  3
#define _RAISE  4
#define _FUNCT  5
#define _ADJUST 6

#define D_MUT LS(LC(F9))
#define D_SIL LS(LC(F11))
#define D_SHS LS(LC(F10))

#define VD_L   LC(LG(LEFT))
#define VD_R   LC(LG(RIGHT))
#define VD_U   LG(TAB)

#define E_IEX   RA(N1)
#define E_IQM   RA(FSLH)

#define E_NN    RA(N)
#define E_CC    RA(C)
#define E_LL    RA(RS(SEMI))
#define E_OF    RA(N2)
#define E_OM    RA(N3)
#define E_DEG   RA(SEMI)
#define E_EUR   RA(N5)
#define E_EYE   RA(BSLH)

#define E_AOB   RA(GRAVE)
#define E_ATC   RA(SQT)
#define E_ACF   RA(N6)
#define E_ADI   RA(RS(DQT))

/ {
    macros {
        talpha: talpha {
            label = "talpha";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &to _BASE>
                , <&macro_pause_for_release>
                , <&macro_tap &to _GAME>
                ;
        };
        
        qp: qp {
            label = "qp";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings
                = <&macro_param_1to1>
                , <&macro_tap &kp MACRO_PLACEHOLDER>;
        };
        
        qa: qa {
            label = "qa";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings
                = <&macro_param_1to1>
                , <&macro_tap &kp MACRO_PLACEHOLDER>
                , <&macro_tap &to _BASE>;
        };
        
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &kp Q       &kp W       &kp E       &kp R       &kp T                   &kp Y       &kp U       &kp I       &kp O       &kp P
&kp TAB     &kp A       &kp S       &kp D       &kp F       &kp G                   &kp H       &kp J       &kp K       &kp L       &kp SEMI    &kp RET
&kp LCTL    &kp Z       &kp X       &kp C       &kp V       &kp B                   &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH    &kp RSFT
                                    &kp LWIN    &mo _RAISE  &kp SPACE               &kp BSPC    &mo _LOWER  &kp RALT     
            >;
        };

        game_layer {
            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &kp TAB     &kp Q       &kp W       &kp E       &kp R                   &kp Y       &kp U       &kp I       &kp O       &kp P                
&kp ESC     &kp LSFT    &kp A       &kp S       &kp D       &kp F                   &kp H       &kp J       &kp K       &kp L       &kp SEMI    &kp RET 
&kp T       &kp LCTL    &kp Z       &kp X       &kp C       &kp V                   &kp N       &kp M       &kp VD_L    &kp VD_U    &kp VD_R    &kp LGUI
                                    &kp LALT    &mo _GNUM   &kp SPACE               &kp BSPC    &mo _LOWER  &talpha          
            >;
        };

        gnum_layer {
            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &trans      &kp N1      &trans      &kp N2      &kp N3                  &trans      &trans      &kp UP      &trans      &trans
&trans      &trans      &trans      &trans      &trans      &kp G                   &trans      &kp LEFT    &kp DOWN    &kp RIGHT   &trans      &kp LA(F4)
&trans      &trans      &kp N4      &kp N5      &kp N6      &kp B                   &trans      &trans      &trans      &trans      &trans      &trans
                                    &trans      &trans      &trans                  &trans      &trans      &kp RALT    
            >;
        };

        lower_layer {
            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &kp EXCL    &kp AT      &kp HASH    &kp DLLR    &kp PRCNT               &qa E_ACF   &kp HOME    &kp UP      &kp END     &qa E_AOB              
&kp ESC     &kp TILDE   &kp MINUS   &qp PLUS    &qp EQUAL   &kp E_LL                &qa E_ADI   &kp LEFT    &kp DOWN    &kp RIGHT   &qa E_ATC   &trans    
&trans      &kp GRAVE   &kp E_OM    &kp E_OF    &kp UNDER   &kp E_EUR               &kp PSCRN   &kp PG_DN   &kp INS     &kp PG_UP   &to _FUNCT  &trans
                                    &trans      &mo _RAISE  &trans                  &kp DEL     &mo _LOWER  &kp RALT    
            >;
        };

        raise_layer {
            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &kp N1      &kp N2      &kp N3      &kp N4      &kp N5                  &kp CARET   &kp AMPS    &kp ASTRK   &kp LPAR    &kp RPAR               
&kp ESC     &kp N6      &kp N7      &kp N8      &kp N9      &kp N0                  &kp LBRC    &kp LBKT    &kp RBKT    &kp RBRC    &kp SQT     &trans    
&trans      &mo _FUNCT  &kp VD_L    &kp VD_U    &kp VD_R    &kp CAPS                &kp BSLH    &kp PIPE    &kp LT      &kp GT      &kp DQT     &trans
                                    &trans      &mo _RAISE  &trans                  &trans      &mo _LOWER  &kp RALT    
            >;
        };

        funct_layer {
                            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &kp F1      &kp F2      &kp F3      &kp F4      &kp F5                &kp KP_DIVIDE &kp KP_N7   &kp KP_N8   &kp KP_N9   &kp KP_MINUS
&trans      &kp F6      &kp F7      &kp F8      &kp F9      &kp F10             &kp KP_MULTIPLY &kp KP_N4   &kp KP_N5   &kp KP_N6   &kp KP_PLUS &kp KP_ENTER
&trans     &out OUT_TOG &kp F11     &kp F12     &kp SLCK    &kp PAUSE_BREAK         &kp ESC     &kp KP_N1   &kp KP_N2   &kp KP_N3   &to _BASE   &kp KP_NUM
                                    &trans      &mo _RAISE  &trans                  &kp BSPC    &kp KP_N0   &kp KP_DOT
            >;
        };

        adjust_layer {
            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &kp E_IEX  &kp C_VOL_UP &kp C_PREV  &kp D_SHS   &bootloader             &bootloader &none       &none       &none       &none       
&kp ESC     &kp K_APP  &kp C_VOL_DN &kp C_PP    &kp D_MUT   &none                  &out OUT_TOG &to _BASE   &to _GAME   &none       &none       &trans
&kp RCTL    &kp E_EYE  &kp C_MUTE   &kp C_NEXT  &kp D_SIL   &none                   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &kp E_IQM &kp LSFT
                                    &kp RWIN    &mo _RAISE  &trans                  &trans      &mo _LOWER  &kp RALT      
            >;
        };
    };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <_LOWER _RAISE>;
            then-layer = <_ADJUST>;
        };
    };
};